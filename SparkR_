Spark R
> # Load sparklyr
> library(sparklyr)
> 
> # Connect to your Spark cluster
> spark_conn <- spark_connect(master = "local")
> 
> # Print the version of Spark
> spark_version(sc = spark_conn)
[1] '2.1.0'
> 
> # Disconnect from Spark
> spark_disconnect(sc = spark_conn)

> # Load dplyr
> library(sparklyr)
> 
> # Explore track_metadata structure
> str(track_metadata)
Classes 'tbl_df', 'tbl' and 'data.frame':	1000 obs. of  11 variables:
 $ track_id          : chr  "TRDVOZX128F93283A3" "TRDPMEU12903CC5434" "TRJQDNJ128F426E8CE" "TRRRGCS128F4280BB6" ...
 $ title             : chr  "Jersey Belle Blues" "Get Yourself Together" "Jersey Bull Blues" "High Fever Blues" ...
 $ song_id           : chr  "SOKMEHX12AB0180877" "SOFCPUM12AB018A4EB" "SOKDFLC12A8C1354AE" "SONQUOG12A8C13C76F" ...
 $ release           : chr  "Backwater Blues" "Rambler's Blues" "Complete Recordings_ CD E" "The Panama Limited" ...
 $ artist_id         : chr  "ARDNQ0R1187B9BA1EF" "ARDNQ0R1187B9BA1EF" "ARTDUXM1187B9899ED" "ARNEL2O1187FB4421A" ...
 $ artist_mbid       : chr  "dbfd61ef-fce1-4803-9f18-7bfdd3996508" "dbfd61ef-fce1-4803-9f18-7bfdd3996508" "c71b4f57-29da-4bf2-bccb-9dc81cd2d905" "882af819-887e-4691-a4af-b14613058942" ...
 $ artist_name       : chr  "Lonnie Johnson" "Lonnie Johnson" "Charley Patton" "Bukka White" ...
 $ duration          : num  178 190 193 174 192 ...
 $ artist_familiarity: num  0.559 0.
 Big data, tiny tibble
 559 0.574 0.572 0.638 ...
 $ artist_hotttnesss : num  0.405 0.405 0.376 0.424 0.405 ...
 $ year              : int  1940 1940 1934 1940 1931 1939 1936 1940 1935 1940 ...
> 
> # Connect to your Spark cluster
> spark_conn <- spark_connect("local")
> 
> # Copy track_metadata to Spark
> track_metadata_tbl <- copy_to(spark_conn,track_metadata)
> 
> # List the data frames available in Spark
> src_tbls( spark_conn)
Error: could not find function "src_tbls"
> 
> # Disconnect from Spark
> spark_disconnect(sc =spark_conn)
> 
Big data, tiny tibble -------------------------------------------------
# Link to the track_metadata table in Spark
> track_metadata_tbl <- tbl(spark_conn, "track_metadata")
> 
> # See how big the dataset is
> dim(track_metadata_tbl)
[1] 1000   11
> 
> # See how small the tibble is
> object_size(track_metadata_tbl)
10.1 kB

Exploring the structure of tibbles ----------------------------------------------------
> # Print 5 rows, all columns
> print(track_metadata_tbl, n=5, width = Inf)
# Source:   table<track_metadata> [?? x 11]
# Database: spark_connection
  track_id           title                     song_id           
  <chr>              <chr>                     <chr>             
1 TRSTWXA12903D15238 The Breeze and I          SOCQMXH12AC468B61D
2 TRQNQZX128F422BA2F Soul Of A Short Fat Man   SOWULXB12A6D4FC1AD
3 TRTPVEB128F42614A6 The Galloping Latin       SOHKYIC12A8AE48D00
4 TRZZNFB128F933E7D2 The Twelfth Of Never      SOJVHKV12AB0182669
5 TRZAAWN128F92EAC1C Little Child Runnin' Wild SORYVBT12AB017BB45
  release                                           artist_id         
  <chr>                                             <chr>             
1 Espana                                            ARNNU4G1187FB5991B
2 Diary Of A Band Vol 1 & 2                         ARJ9DSA1187B990E00
3 The Blues; That's Me!                             ARQ8CJ61187FB3DC9C
4 Give Me Just A Little More Time + In Session&plus ARFAKTH1187B9B0C18
5 Beautiful Brother - The Essential                 ARNMWP51187FB3E963
  artist_mbid                          artist_name                     duration
  <chr>                                <chr>                              <dbl>
1 5c176092-cb4d-4e05-806b-1e9414f2b28c 101 Strings                         221.
2 4756395c-57ed-4a63-afb2-01117f14dff6 John Mayall & The Bluesbreakers     368.
3 15ab8bb8-7348-4377-ab73-b7acdad1459c Illinois Jacquet                    329.
4 0174d942-39da-4dcd-aa48-d0f3fb4f218d Chairmen Of The Board               193.
5 4dca4bb2-23ba-4103-97e6-5810311db33a Curtis Mayfield                     321.
  artist_familiarity artist_hotttnesss  year
               <dbl>             <dbl> <int>
1              0.467             0.369  1968
2              0.627             0.405  1968
3              0.441             0.355  1969
4              0.536             0.415  1970
5              0.787             0.495  1972
# ... with 995 more rows
> 
> # Examine structure of tibble
> str(track_metadata_tbl)
List of 2
 $ src:List of 1
  ..$ con:List of 11
  .. ..$ master       : chr "local[4]"
  .. ..$ method       : chr "shell"
  .. ..$ app_name     : chr "sparklyr"
  .. ..$ config       :List of 5
  .. .. ..$ sparklyr.cores.local              : int 4
  .. .. ..$ spark.sql.shuffle.partitions.local: int 4
  .. .. ..$ spark.env.SPARK_LOCAL_IP.local    : chr "127.0.0.1"
  .. .. ..$ sparklyr.csv.embedded             : chr "^1.*"
  .. .. ..$ sparklyr.shell.driver-class-path  : chr ""
  .. .. ..- attr(*, "config")= chr "default"
  .. .. ..- attr(*, "file")= chr "/usr/local/lib/R/site-library/sparklyr/conf/config-template.yml"
  .. ..$ spark_home   : chr "/home/repl/.cache/spark/spark-2.1.0-bin-hadoop2.7"
  .. ..$ backend      :Classes 'sockconn', 'connection'  atomic [1:1] 4
  .. .. .. ..- attr(*, "conn_id")=<externalptr> 
  .. ..$ monitor      :Classes 'sockconn', 'connection'  atomic [1:1] 3
  .. .. .. ..- attr(*, "conn_id")=<externalptr> 
  .. ..$ output_file  : chr "/tmp/Rtmp5J7eJV/file16af0cd0f_spark.log"
  .. ..$ spark_context:Classes 'spark_jobj', 'shell_jobj' <environment: 0x4a8a2f0> 
  .. ..$ java_context :Classes 'spark_jobj', 'shell_jobj' <environment: 0x4affa90> 
  .. ..$ hive_context :Classes 'spark_jobj', 'shell_jobj' <environment: 0x4c3b0b8> 
  .. ..- attr(*, "class")= chr [1:3] "spark_connection" "spark_shell_connection" "DBIConnection"
  ..- attr(*, "class")= chr [1:3] "src_spark" "src_sql" "src"
 $ ops:List of 2
  ..$ x   :Classes 'ident', 'character'  chr "track_metadata"
  ..$ vars: chr [1:11] "track_id" "title" "song_id" "release" ...
  ..- attr(*, "class")= chr [1:3] "op_base_remote" "op_base" "op"
 - attr(*, "class")= chr [1:4] "tbl_spark" "tbl_sql" "tbl_lazy" "tbl"
> 
> # Examine structure of data
> glimpse(track_metadata_tbl)
Observations: 25
Variables: 11
$ track_id           <chr> "TRSTWXA12903D15238", "TRQNQZX128F422BA2F", "TRT...
$ title              <chr> "The Breeze and I", "Soul Of A Short Fat Man", "...
$ song_id            <chr> "SOCQMXH12AC468B61D", "SOWULXB12A6D4FC1AD", "SOH...
$ release            <chr> "Espana", "Diary Of A Band Vol 1 & 2", "The Blue...
$ artist_id          <chr> "ARNNU4G1187FB5991B", "ARJ9DSA1187B990E00", "ARQ...
$ artist_mbid        <chr> "5c176092-cb4d-4e05-806b-1e9414f2b28c", "4756395...
$ artist_name        <chr> "101 Strings", "John Mayall & The Bluesbreakers"...
$ duration           <dbl> 221.1000, 368.1955, 329.1424, 193.2534, 320.8093...
$ artist_familiarity <dbl> 0.4669621, 0.6268031, 0.4405487, 0.5358244, 0.78...
$ artist_hotttnesss  <dbl> 0.3687790, 0.4052347, 0.3548943, 0.4150033, 0.49...
$ year               <int> 1968, 1968, 1969, 1970, 1972, 1977, 1978, 1979, ...
> 
> # track_metadata_tbl has been pre-defined
> track_metadata_tbl
# Source:   table<track_metadata> [?? x 11]
# Database: spark_connection
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRSTWXA~ The ~ SOCQMX~ Espana  ARNNU4G1~ 5c176092-c~ 101 Strings     221.
 2 TRQNQZX~ Soul~ SOWULX~ Diary ~ ARJ9DSA1~ 4756395c-5~ John Mayal~     368.
 3 TRTPVEB~ The ~ SOHKYI~ The Bl~ ARQ8CJ61~ 15ab8bb8-7~ Illinois J~     329.
 4 TRZZNFB~ The ~ SOJVHK~ Give M~ ARFAKTH1~ 0174d942-3~ Chairmen O~     193.
 5 TRZAAWN~ Litt~ SORYVB~ Beauti~ ARNMWP51~ 4dca4bb2-2~ Curtis May~     321.
 6 TRRAOAD~ Will~ SODTBY~ Jammys~ ARMDWND1~ 8ee00333-e~ Black Uhuru     179.
 7 TRPGBAO~ Chil~ SOCTEW~ Pure A~ ARBSLZ11~ f940c4dd-f~ Alex de Gr~     162.
 8 TRQLTYD~ Ring~ SONNCT~ Eat To~ ARM7YQQ1~ 4d2956d1-a~ Blondie         210.
 9 TRJNORS~ Chat~ SOGQHH~ Sid Si~ ARBK4PS1~ 637504e3-b~ Sid Vicious     111.
10 TRLSQUC~ Migh~ SOTFGI~ Rockin~ ARRHNLN1~ d86c3c8b-8~ Jelly Roll~     242.
# ... with 990 more rows, and 3 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>
> 
> # Manipulate the track metadata
> track_metadata_tbl %>%
    # Select columns
    select(artist_name, release, title, year)
# Source:   lazy query [?? x 4]
# Database: spark_connection
   artist_name          release                    title                   year
   <chr>                <chr>                      <chr>                  <int>
 1 101 Strings          Espana                     The Breeze and I        1968
 2 John Mayall & The B~ Diary Of A Band Vol 1 & 2  Soul Of A Short Fat M~  1968
 3 Illinois Jacquet     The Blues; That's Me!      The Galloping Latin     1969
 4 Chairmen Of The Boa~ Give Me Just A Little Mor~ The Twelfth Of Never    1970
 5 Curtis Mayfield      Beautiful Brother - The E~ Little Child Runnin' ~  1972
 6 Black Uhuru          Jammys From The Roots [19~ Willow Tree             1977
 7 Alex de Grassi       Pure Alex de Grassi        Children's Dance        1978
 8 Blondie              Eat To The Beat            Ring Of Fire (Live) (~  1979
 9 Sid Vicious          Sid Sings                  Chatterbox (Live)       1979
10 Jelly Roll Kings     Rockin' The Juke Joint Do~ Mighty Long Time        1979
# ... with 990 more rows
> 
> # Try to select columns using [ ]
> tryCatch({
      # Selection code here
      track_metadata_tbl[, c("artist_name", "release", "title", "year")]
    },
    error = print
  )
<simpleError in track_metadata_tbl[, c("artist_name", "release", "title", "year")]: incorrect number of dimensions>

# intense error message: that's normal for sparklyr errors. tryCatch(error = print) is a nice way to see errors without them stopping the execution of your code.

# Filtering rows ---------------------------------
> # track_metadata_tbl has been pre-defined
> glimpse(track_metadata_tbl)
Observations: 25
Variables: 11
$ track_id           <chr> "TRSTWXA12903D15238", "TRQNQZX128F422BA2F", "TRT...
$ title              <chr> "The Breeze and I", "Soul Of A Short Fat Man", "...
$ song_id            <chr> "SOCQMXH12AC468B61D", "SOWULXB12A6D4FC1AD", "SOH...
$ release            <chr> "Espana", "Diary Of A Band Vol 1 & 2", "The Blue...
$ artist_id          <chr> "ARNNU4G1187FB5991B", "ARJ9DSA1187B990E00", "ARQ...
$ artist_mbid        <chr> "5c176092-cb4d-4e05-806b-1e9414f2b28c", "4756395...
$ artist_name        <chr> "101 Strings", "John Mayall & The Bluesbreakers"...
$ duration           <dbl> 221.1000, 368.1955, 329.1424, 193.2534, 320.8093...
$ artist_familiarity <dbl> 0.4669621, 0.6268031, 0.4405487, 0.5358244, 0.78...
$ artist_hotttnesss  <dbl> 0.3687790, 0.4052347, 0.3548943, 0.4150033, 0.49...
$ year               <int> 1968, 1968, 1969, 1970, 1972, 1977, 1978, 1979, ...
> 
> # Manipulate the track metadata with filtering rows ---------------------------------
> track_metadata_tbl %>%
    # Select columns
    select(artist_name, release, title,year) %>%
    # Filter rows
    filter(year >= 1960, year < 1970)
# Source:   lazy query [?? x 4]
# Database: spark_connection
   artist_name          release                  title                     year
   <chr>                <chr>                    <chr>                    <int>
 1 101 Strings          Espana                   The Breeze and I          1968
 2 John Mayall & The B~ Diary Of A Band Vol 1 &~ Soul Of A Short Fat Man   1968
 3 Illinois Jacquet     The Blues; That's Me!    The Galloping Latin       1969
 4 Cliff Richard & The~ Me And My Shadows        Choppin' 'n' Changin' (~  1960
 5 Cliff Richard And T~ The Hits In Between      I Love You                1960
 6 Chubby Checker       Hits of The 60's Volume~ The Twist                 1960
 7 Perez Prado          100 Hits - 50s           Cherry Pink And Apple B~  1960
 8 Charlie Mingus       Period's Jazz Digest Vo~ Stormy Weather            1960
 9 Elvis Presley        His Hand In Mine         If We Never Meet Again    1960
10 The Drifters         Save The Last Dance For~ Some Kind Of Wonderful ~  1960
# ... with 108 more rows

# Arranging rows ------------------------------------------------------------------------------
> # track_metadata_tbl has been pre-defined
> track_metadata_tbl
# Source:   table<track_metadata> [?? x 11]
# Database: spark_connection
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRSTWXA~ The ~ SOCQMX~ Espana  ARNNU4G1~ 5c176092-c~ 101 Strings     221.
 2 TRQNQZX~ Soul~ SOWULX~ Diary ~ ARJ9DSA1~ 4756395c-5~ John Mayal~     368.
 3 TRTPVEB~ The ~ SOHKYI~ The Bl~ ARQ8CJ61~ 15ab8bb8-7~ Illinois J~     329.
 4 TRZZNFB~ The ~ SOJVHK~ Give M~ ARFAKTH1~ 0174d942-3~ Chairmen O~     193.
 5 TRZAAWN~ Litt~ SORYVB~ Beauti~ ARNMWP51~ 4dca4bb2-2~ Curtis May~     321.
 6 TRRAOAD~ Will~ SODTBY~ Jammys~ ARMDWND1~ 8ee00333-e~ Black Uhuru     179.
 7 TRPGBAO~ Chil~ SOCTEW~ Pure A~ ARBSLZ11~ f940c4dd-f~ Alex de Gr~     162.
 8 TRQLTYD~ Ring~ SONNCT~ Eat To~ ARM7YQQ1~ 4d2956d1-a~ Blondie         210.
 9 TRJNORS~ Chat~ SOGQHH~ Sid Si~ ARBK4PS1~ 637504e3-b~ Sid Vicious     111.
10 TRLSQUC~ Migh~ SOTFGI~ Rockin~ ARRHNLN1~ d86c3c8b-8~ Jelly Roll~     242.
# ... with 990 more rows, and 3 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>
> 
> # Manipulate the track metadata ---------------------------------
> track_metadata_tbl %>%
    # Select columns
    select(artist_name, release, title, year ) %>%
    # Filter rows
    filter(year>=1960, year <1970) %>%
    # Arrange rows
    arrange(artist_name, desc(year), title)
# Source:     lazy query [?? x 4]
# Database:   spark_connection
# Ordered by: artist_name, desc(year), title
   artist_name                   release                     title         year
   <chr>                         <chr>                       <chr>        <int>
 1 101 Strings                   Espana                      The Breeze ~  1968
 2 ? & The Mysterians            The Best Of ? & The Myster~ Smokes        1967
 3 Albert Ayler                  Live In Greenwich Village:~ Omega Is Th~  1967
 4 Alice Cooper                  Pretties For You            Apple Bush ~  1969
 5 Barbra Streisand; Arranged a~ A Christmas Collection      The Lord's ~  1967
 6 Barry McGuire                 Eve Of Destruction          You Were On~  1965
 7 Ben E. King                   Seven Letters               Jamaica (LP~  1965
 8 Bill Monroe & His Bluegrass ~ Definitive Americana        Blue Moon O~  1961
 9 Bill Monroe & The Bluegrass ~ The Essential Collection    Blue Moon O~  1961
10 Bo Diddley                    Turn up the house lights    Roadrunner    1960
# ... with 108 more rows
> 
---------------------------------
> # Manipulate the track metadata with mutate:  Mutation has two purposes: changing columns, and adding new columns.
> track_metadata_tbl %>%
    # Select columns
    select(title, duration)%>%
    # Mutate columns
    mutate(duration_minutes = duration/60 )
# Source:   lazy query [?? x 3]
# Database: spark_connection
   title                                       duration duration_minutes
   <chr>                                          <dbl>            <dbl>
 1 The Breeze and I                                221.             3.68
 2 Soul Of A Short Fat Man                         368.             6.14
 3 The Galloping Latin                             329.             5.49
 4 The Twelfth Of Never                            193.             3.22
 5 Little Child Runnin' Wild                       321.             5.35
 6 Willow Tree                                     179.             2.98
 7 Children's Dance                                162.             2.69
 8 Ring Of Fire (Live) (2001 Digital Remaster)     210.             3.50
 9 Chatterbox (Live)                               111.             1.85
10 Mighty Long Time                                242.             4.03
# ... with 990 more rows
> 
# Summarizing returns a tibble with a summary statistic in each column with summarize
> # Manipulate the track metadata
> track_metadata_tbl %>%
    # Select columns
    select(title, duration) %>%
    # Mutate columns
    mutate(duration_minutes =  duration/60) %>%
    # Summarize columns
    summarize(mean_duration_minutes = mean(duration_minutes))
# Source:   lazy query [?? x 1]
# Database: spark_connection
  mean_duration_minutes
                  <dbl>
1                  3.54
> # track_metadata_tbl has been pre-defined ----------------------------------------------------
> track_metadata_tbl
# Source:   table<track_metadata> [?? x 11]
# Database: spark_connection
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRSTWXA~ The ~ SOCQMX~ Espana  ARNNU4G1~ 5c176092-c~ 101 Strings     221.
 2 TRQNQZX~ Soul~ SOWULX~ Diary ~ ARJ9DSA1~ 4756395c-5~ John Mayal~     368.
 3 TRTPVEB~ The ~ SOHKYI~ The Bl~ ARQ8CJ61~ 15ab8bb8-7~ Illinois J~     329.
 4 TRZZNFB~ The ~ SOJVHK~ Give M~ ARFAKTH1~ 0174d942-3~ Chairmen O~     193.
 5 TRZAAWN~ Litt~ SORYVB~ Beauti~ ARNMWP51~ 4dca4bb2-2~ Curtis May~     321.
 6 TRRAOAD~ Will~ SODTBY~ Jammys~ ARMDWND1~ 8ee00333-e~ Black Uhuru     179.
 7 TRPGBAO~ Chil~ SOCTEW~ Pure A~ ARBSLZ11~ f940c4dd-f~ Alex de Gr~     162.
 8 TRQLTYD~ Ring~ SONNCT~ Eat To~ ARM7YQQ1~ 4d2956d1-a~ Blondie         210.
 9 TRJNORS~ Chat~ SOGQHH~ Sid Si~ ARBK4PS1~ 637504e3-b~ Sid Vicious     111.
10 TRLSQUC~ Migh~ SOTFGI~ Rockin~ ARRHNLN1~ d86c3c8b-8~ Jelly Roll~     242.
# ... with 990 more rows, and 3 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>
> 
> track_metadata_tbl %>%
    # Select columns starting with artist
    select(starts_with("artist"))
# Source:   lazy query [?? x 5]
# Database: spark_connection
   artist_id   artist_mbid     artist_name    artist_familiar~ artist_hotttnes~
   <chr>       <chr>           <chr>                     <dbl>            <dbl>
 1 ARNNU4G118~ 5c176092-cb4d-~ 101 Strings               0.467            0.369
 2 ARJ9DSA118~ 4756395c-57ed-~ John Mayall &~            0.627            0.405
 3 ARQ8CJ6118~ 15ab8bb8-7348-~ Illinois Jacq~            0.441            0.355
 4 ARFAKTH118~ 0174d942-39da-~ Chairmen Of T~            0.536            0.415
 5 ARNMWP5118~ 4dca4bb2-23ba-~ Curtis Mayfie~            0.787            0.495
 6 ARMDWND118~ 8ee00333-ec2c-~ Black Uhuru               0.707            0.463
 7 ARBSLZ1118~ f940c4dd-f687-~ Alex de Grassi            0.565            0.381
 8 ARM7YQQ118~ 4d2956d1-a3f7-~ Blondie                   0.759            0.551
 9 ARBK4PS118~ 637504e3-be95-~ Sid Vicious               0.621            0.455
10 ARRHNLN118~ d86c3c8b-84d5-~ Jelly Roll Ki~            0.468            0.303
# ... with 990 more rows
> 
> track_metadata_tbl %>%
    # Select columns ending with id
    select(ends_with("id"))
# Source:   lazy query [?? x 4]
# Database: spark_connection
   track_id        song_id         artist_id       artist_mbid                 
   <chr>           <chr>           <chr>           <chr>                       
 1 TRSTWXA12903D1~ SOCQMXH12AC468~ ARNNU4G1187FB5~ 5c176092-cb4d-4e05-806b-1e9~
 2 TRQNQZX128F422~ SOWULXB12A6D4F~ ARJ9DSA1187B99~ 4756395c-57ed-4a63-afb2-011~
 3 TRTPVEB128F426~ SOHKYIC12A8AE4~ ARQ8CJ61187FB3~ 15ab8bb8-7348-4377-ab73-b7a~
 4 TRZZNFB128F933~ SOJVHKV12AB018~ ARFAKTH1187B9B~ 0174d942-39da-4dcd-aa48-d0f~
 5 TRZAAWN128F92E~ SORYVBT12AB017~ ARNMWP51187FB3~ 4dca4bb2-23ba-4103-97e6-581~
 6 TRRAOAD12903CE~ SODTBYX12AC3DF~ ARMDWND1187B9A~ 8ee00333-ec2c-439b-a619-ae1~
 7 TRPGBAO128F42B~ SOCTEWS12A8C13~ ARBSLZ11187FB4~ f940c4dd-f687-4c6a-872b-1cc~
 8 TRQLTYD128F146~ SONNCTZ12A6D4F~ ARM7YQQ1187B9A~ 4d2956d1-a3f7-44bb-9a41-675~
 9 TRJNORS128F145~ SOGQHHK12A6D4F~ ARBK4PS1187B9A~ 637504e3-be95-4005-83ee-3eb~
10 TRLSQUC128F422~ SOTFGIG12A6D4F~ ARRHNLN1187FB5~ d86c3c8b-84d5-44ce-80fa-7cf~
# ... with 990 more rows

# Matching colomns with cintains() and matches()  
> track_metadata_tbl %>%
    # Select columns containing ti
    select(contains("ti"))
# Source:   lazy query [?? x 7]
# Database: spark_connection
   title artist_id artist_mbid artist_name duration artist_familiar~
   <chr> <chr>     <chr>       <chr>          <dbl>            <dbl>
 1 The ~ ARNNU4G1~ 5c176092-c~ 101 Strings     221.            0.467
 2 Soul~ ARJ9DSA1~ 4756395c-5~ John Mayal~     368.            0.627
 3 The ~ ARQ8CJ61~ 15ab8bb8-7~ Illinois J~     329.            0.441
 4 The ~ ARFAKTH1~ 0174d942-3~ Chairmen O~     193.            0.536
 5 Litt~ ARNMWP51~ 4dca4bb2-2~ Curtis May~     321.            0.787
 6 Will~ ARMDWND1~ 8ee00333-e~ Black Uhuru     179.            0.707
 7 Chil~ ARBSLZ11~ f940c4dd-f~ Alex de Gr~     162.            0.565
 8 Ring~ ARM7YQQ1~ 4d2956d1-a~ Blondie         210.            0.759
 9 Chat~ ARBK4PS1~ 637504e3-b~ Sid Vicious     111.            0.621
10 Migh~ ARRHNLN1~ d86c3c8b-8~ Jelly Roll~     242.            0.468
# ... with 990 more rows, and 1 more variable: artist_hotttnesss <dbl>
> 
> track_metadata_tbl %>%
    # Select columns matching ti.?t
    select(matches("ti.?t"))
# Source:   lazy query [?? x 6]
# Database: spark_connection
   title   artist_id  artist_mbid artist_name artist_familiar~ artist_hotttnes~
   <chr>   <chr>      <chr>       <chr>                  <dbl>            <dbl>
 1 The Br~ ARNNU4G11~ 5c176092-c~ 101 Strings            0.467            0.369
 2 Soul O~ ARJ9DSA11~ 4756395c-5~ John Mayal~            0.627            0.405
 3 The Ga~ ARQ8CJ611~ 15ab8bb8-7~ Illinois J~            0.441            0.355
 4 The Tw~ ARFAKTH11~ 0174d942-3~ Chairmen O~            0.536            0.415
 5 Little~ ARNMWP511~ 4dca4bb2-2~ Curtis May~            0.787            0.495
 6 Willow~ ARMDWND11~ 8ee00333-e~ Black Uhuru            0.707            0.463
 7 Childr~ ARBSLZ111~ f940c4dd-f~ Alex de Gr~            0.565            0.381
 8 Ring O~ ARM7YQQ11~ 4d2956d1-a~ Blondie                0.759            0.551
 9 Chatte~ ARBK4PS11~ 637504e3-b~ Sid Vicious            0.621            0.455
10 Mighty~ ARRHNLN11~ d86c3c8b-8~ Jelly Roll~            0.468            0.303
# ... with 990 more rows

# Selecting Unique row ---------------------------
> track_metadata_tbl %>%
    # Only return rows with distinct artist_name
    distinct(artist_name)
# Source:   lazy query [?? x 1]
# Database: spark_connection
   artist_name                                                
   <chr>                                                      
 1 101 Strings                                                
 2 John Mayall & The Bluesbreakers                            
 3 Curtis Mayfield                                            
 4 Sid Vicious                                                
 5 Light Of The World                                         
 6 Raul Seixas                                                
 7 Be Bop Deluxe                                              
 8 Harold Melvin & The Blue Notes (Featuring Teddy Pendergrass
 9 Eugenio Finardi                                            
10 Cerrone                                                    
# ... with 749 more rows
> 

# count(sort = TRUE) + top_n() is a pattern worth remembering.---------------------------------
> track_metadata_tbl %>%
    # Count the artist_name values
    count(artist_name, sort = TRUE) %>%
    # Restrict to top 20
    top_n(8)
Selecting by  n
# Source:     lazy query [?? x 2]
# Database:   spark_connection
# Ordered by: desc(n)
   artist_name                     n
   <chr>                       <dbl>
 1 Bukka White                    20
 2 Merle Travis                   13
 3 Skip James                     12
 4 Tampa Red                      12
 5 Billie Holiday                  9
 6 Sleepy John Estes               9
 7 Bud Powell                      9
 8 "Arthur \"Big Boy\" Crudup"     8

# copy_to() moves your data from R to Spark; collect() goes in the opposite direction.---------------------------
> # track_metadata_tbl has been pre-defined
> track_metadata_tbl
# Source:   table<track_metadata> [?? x 11]
# Database: spark_connection
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRSTWXA~ The ~ SOCQMX~ Espana  ARNNU4G1~ 5c176092-c~ 101 Strings     221.
 2 TRQNQZX~ Soul~ SOWULX~ Diary ~ ARJ9DSA1~ 4756395c-5~ John Mayal~     368.
 3 TRTPVEB~ The ~ SOHKYI~ The Bl~ ARQ8CJ61~ 15ab8bb8-7~ Illinois J~     329.
 4 TRZZNFB~ The ~ SOJVHK~ Give M~ ARFAKTH1~ 0174d942-3~ Chairmen O~     193.
 5 TRZAAWN~ Litt~ SORYVB~ Beauti~ ARNMWP51~ 4dca4bb2-2~ Curtis May~     321.
 6 TRRAOAD~ Will~ SODTBY~ Jammys~ ARMDWND1~ 8ee00333-e~ Black Uhuru     179.
 7 TRPGBAO~ Chil~ SOCTEW~ Pure A~ ARBSLZ11~ f940c4dd-f~ Alex de Gr~     162.
 8 TRQLTYD~ Ring~ SONNCT~ Eat To~ ARM7YQQ1~ 4d2956d1-a~ Blondie         210.
 9 TRJNORS~ Chat~ SOGQHH~ Sid Si~ ARBK4PS1~ 637504e3-b~ Sid Vicious     111.
10 TRLSQUC~ Migh~ SOTFGI~ Rockin~ ARRHNLN1~ d86c3c8b-8~ Jelly Roll~     242.
# ... with 990 more rows, and 3 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>
> 
> results <- track_metadata_tbl %>%
    # Filter where artist familiarity is greater than 0.9
     filter(artist_familiarity>0.9 )
> 
> # Examine the class of the results
> class(results)
[1] "tbl_spark" "tbl_sql"   "tbl_lazy"  "tbl"
> 
> # Collect your results
> collected <- results %>%
    collect()
> 
> # Examine the class of the collected results
> class(collected)
[1] "tbl_df"     "tbl"        "data.frame"
> 
#Storing intermediate results----------------------class(computed) is tbl_lazy. compute() lets you store intermediate results, without having to copy data to R.
> 
> computed <- track_metadata_tbl %>%
    # Filter where artist familiarity is greater than 0.8
    filter(artist_familiarity > 0.8) %>%
    # Compute the results
    compute("familiar_artists")
> 
> # See the available datasets
> src_tbls(spark_conn)
[1] "familiar_artists" "track_metadata"
> 
> # Examine the class of the computed results
> class(computed)
[1] "tbl_spark" "tbl_sql"   "tbl_lazy"  "tbl"

# Groups: great for music, great for data ---------summarize() works with grouped tibbles, and as you'll see next, so does mutate()
> duration_by_artist <- track_metadata_tbl %>%
    # Group by artist
    group_by(artist_name) %>%
    # Calc mean duration
    mutate(mean_duration = mean(duration))
> 
> duration_by_artist %>%
    # Sort by ascending mean duration
    arrange(mean_duration)
# Source:     lazy query [?? x 12]
# Database:   spark_connection
# Groups:     artist_name
# Ordered by: mean_duration
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRUTWVV~ Get ~ SOJLQI~ VYP - ~ ARWC1XH1~ 194e87c9-b~ Lil Mama        11.5
 2 TRTYRTU~ Rela~ SOJYWS~ Bird A~ AREMX2T1~ eae383bc-4~ Charlie Pa~     25.1
 3 TRFOYSX~ Luke~ SODGDS~ The Am~ ARPDDNW1~ c266a7ab-7~ DJ Yoda         32.4
 4 TRQRITN~ Cikl~ SONRGW~ Let 3 ~ ARIHVRZ1~ 443dfd6c-3~ Let 3           33.1
 5 TRLLBQO~ As A~ SOXSUM~ Warner~ AREDRYV1~ 6840dcbe-3~ Secos And ~     56.9
 6 TRBUUZO~ Thre~ SOHFJG~ Stoned~ AR8SRQ31~ 73faa89a-e~ Ten Years ~     58.7
 7 TRRHQFT~ Wino~ SOBAME~ Spiral~ ARMEQ971~ 8bf5abde-8~ Ralph McTe~     60.5
 8 TRXYPUK~ (How~ SOGVNA~ The Th~ ARTJ1WP1~ 6a22414d-1~ Le Loup         61.4
 9 TRSECNY~ Bugz~ SOSNUM~ D-12 W~ AREJ4S91~ 9ab19acf-0~ D-12            65.4
10 TRGTSRF~ I Lo~ SONFOR~ Wowee ~ ARVFF0Y1~ 36bfa85f-7~ Pavement        70.8
# ... with 990 more rows, and 4 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>, mean_duration <dbl>
> 
> duration_by_artist %>%
    # Sort by descending mean duration
    arrange(desc(mean_duration))
# Source:     lazy query [?? x 12]
# Database:   spark_connection
# Groups:     artist_name
# Ordered by: desc(mean_duration)
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRXSIOZ~ Medi~ SOVGJC~ Right ~ ARJ6VQ21~ f3b8e107-a~ Charles Mi~    1423.
 2 TRYYMQH~ Love~ SOHATH~ Vanity  ARV1ALU1~ 26cc84a4-a~ Eighteen V~     814.
 3 TRNOBJE~ East~ SOZIDQ~ East-W~ ARHWVGW1~ 20dcf3aa-c~ The Paul B~     792.
 4 TREXTHU~ Groo~ SOHDOP~ Art Pe~ AR15R2V1~ 266b9126-4~ Art Pepper      752.
 5 TRWVLKE~ Colo~ SOXVEZ~ Rebirt~ AR8KLL91~ 21c37b55-f~ Blonde On ~     723.
 6 TRTDSTI~ Omeg~ SOKPFS~ Live I~ ARYXELS1~ b2dcc67a-4~ Albert Ayl~     647.
 7 TRQVOPL~ High~ SOWZSF~ Electr~ ARBVSLV1~ c26cc89a-c~ Heights Of~     632.
 8 TRKQSYS~ Cali~ SOBQNR~ 70TH B~ ARPUBU61~ 18c1e06b-f~ John Mayall     930.
 9 TRQJXBK~ Room~ SOLAYL~ Turnin~ ARPUBU61~ 18c1e06b-f~ John Mayall     306.
10 TRWUPWC~ It M~ SOJIGE~ Roberta ARQ95WI1~ 5298bbcb-7~ Roberta Fl~     602.
# ... with 990 more rows, and 4 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>, mean_duration <dbl>
> # track_metadata_tbl has been pre-defined
> track_metadata_tbl
# Source:   table<track_metadata> [?? x 11]
# Database: spark_connection
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRSTWXA~ The ~ SOCQMX~ Espana  ARNNU4G1~ 5c176092-c~ 101 Strings     221.
 2 TRQNQZX~ Soul~ SOWULX~ Diary ~ ARJ9DSA1~ 4756395c-5~ John Mayal~     368.
 3 TRTPVEB~ The ~ SOHKYI~ The Bl~ ARQ8CJ61~ 15ab8bb8-7~ Illinois J~     329.
 4 TRZZNFB~ The ~ SOJVHK~ Give M~ ARFAKTH1~ 0174d942-3~ Chairmen O~     193.
 5 TRZAAWN~ Litt~ SORYVB~ Beauti~ ARNMWP51~ 4dca4bb2-2~ Curtis May~     321.
 6 TRRAOAD~ Will~ SODTBY~ Jammys~ ARMDWND1~ 8ee00333-e~ Black Uhuru     179.
 7 TRPGBAO~ Chil~ SOCTEW~ Pure A~ ARBSLZ11~ f940c4dd-f~ Alex de Gr~     162.
 8 TRQLTYD~ Ring~ SONNCT~ Eat To~ ARM7YQQ1~ 4d2956d1-a~ Blondie         210.
 9 TRJNORS~ Chat~ SOGQHH~ Sid Si~ ARBK4PS1~ 637504e3-b~ Sid Vicious     111.
10 TRLSQUC~ Migh~ SOTFGI~ Rockin~ ARRHNLN1~ d86c3c8b-8~ Jelly Roll~     242.
# ... with 990 more rows, and 3 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>
> 
> duration_by_artist <- track_metadata_tbl %>%
    # Group by artist
    group_by(artist_name) %>%
    # Calc mean duration
    mutate(mean_duration = mean(duration))
> 
> duration_by_artist %>%
    # Sort by ascending mean duration
    arrange(mean_duration)
# Source:     lazy query [?? x 12]
# Database:   spark_connection
# Groups:     artist_name
# Ordered by: mean_duration
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRUTWVV~ Get ~ SOJLQI~ VYP - ~ ARWC1XH1~ 194e87c9-b~ Lil Mama        11.5
 2 TRTYRTU~ Rela~ SOJYWS~ Bird A~ AREMX2T1~ eae383bc-4~ Charlie Pa~     25.1
 3 TRFOYSX~ Luke~ SODGDS~ The Am~ ARPDDNW1~ c266a7ab-7~ DJ Yoda         32.4
 4 TRQRITN~ Cikl~ SONRGW~ Let 3 ~ ARIHVRZ1~ 443dfd6c-3~ Let 3           33.1
 5 TRLLBQO~ As A~ SOXSUM~ Warner~ AREDRYV1~ 6840dcbe-3~ Secos And ~     56.9
 6 TRBUUZO~ Thre~ SOHFJG~ Stoned~ AR8SRQ31~ 73faa89a-e~ Ten Years ~     58.7
 7 TRRHQFT~ Wino~ SOBAME~ Spiral~ ARMEQ971~ 8bf5abde-8~ Ralph McTe~     60.5
 8 TRXYPUK~ (How~ SOGVNA~ The Th~ ARTJ1WP1~ 6a22414d-1~ Le Loup         61.4
 9 TRSECNY~ Bugz~ SOSNUM~ D-12 W~ AREJ4S91~ 9ab19acf-0~ D-12            65.4
10 TRGTSRF~ I Lo~ SONFOR~ Wowee ~ ARVFF0Y1~ 36bfa85f-7~ Pavement        70.8
# ... with 990 more rows, and 4 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>, mean_duration <dbl>
> 
> duration_by_artist %>%
    # Sort by descending mean duration
    arrange(desc(mean_duration))
# Source:     lazy query [?? x 12]
# Database:   spark_connection
# Groups:     artist_name
# Ordered by: desc(mean_duration)
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRXSIOZ~ Medi~ SOVGJC~ Right ~ ARJ6VQ21~ f3b8e107-a~ Charles Mi~    1423.
 2 TRYYMQH~ Love~ SOHATH~ Vanity  ARV1ALU1~ 26cc84a4-a~ Eighteen V~     814.
 3 TRNOBJE~ East~ SOZIDQ~ East-W~ ARHWVGW1~ 20dcf3aa-c~ The Paul B~     792.
 4 TREXTHU~ Groo~ SOHDOP~ Art Pe~ AR15R2V1~ 266b9126-4~ Art Pepper      752.
 5 TRWVLKE~ Colo~ SOXVEZ~ Rebirt~ AR8KLL91~ 21c37b55-f~ Blonde On ~     723.
 6 TRTDSTI~ Omeg~ SOKPFS~ Live I~ ARYXELS1~ b2dcc67a-4~ Albert Ayl~     647.
 7 TRQVOPL~ High~ SOWZSF~ Electr~ ARBVSLV1~ c26cc89a-c~ Heights Of~     632.
 8 TRKQSYS~ Cali~ SOBQNR~ 70TH B~ ARPUBU61~ 18c1e06b-f~ John Mayall     930.
 9 TRQJXBK~ Room~ SOLAYL~ Turnin~ ARPUBU61~ 18c1e06b-f~ John Mayall     306.
10 TRWUPWC~ It M~ SOJIGE~ Roberta ARQ95WI1~ 5298bbcb-7~ Roberta Fl~     602.
# ... with 990 more rows, and 4 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>, mean_duration <dbl>

#-----------Groups of mutants-------------------mutate() and summarize() are commonly paired with group_by()
track_metadata_tbl %>%
    # Group by artist
    group_by(artist_name) %>%
    # Calc time since first release
    mutate(time_since_first_release = year -min(year)) %>%
    # Arrange by descending time since first release
    arrange(desc(time_since_first_release))
# Source:     lazy query [?? x 12]
# Database:   spark_connection
# Groups:     artist_name
# Ordered by: desc(time_since_first_release)
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TROGYEE~ Okie~ SOGNFI~ No Noi~ AR47XGG1~ c7356af9-9~ Charlie Pa~    184. 
 2 TRUPFJK~ How ~ SOSABQ~ Nazz V~ ARYWCFZ1~ ""          Nazz           232. 
 3 TRODYBQ~ Love~ SOHESH~ Sonny ~ AR6Q4T91~ 3b47247e-5~ Sonny Roll~    181. 
 4 TRXOPBM~ Shin~ SOCFMM~ Unmete~ ARMDWND1~ 8ee00333-e~ Black Uhuru    199. 
 5 TRIETJC~ Ring~ SOOGYV~ 20th C~ ARKFXJJ1~ e9d7f684-d~ Sam The Sh~    149. 
 6 TRUTXMQ~ 1950~ SOBXPK~ Tampa ~ AR576O51~ 1b62df85-0~ Tampa Red      198. 
 7 TRIPULZ~ Worl~ SOCRKF~ More C~ ARV2G141~ 6aa4bb26-3~ Noel Coward    180. 
 8 TRNNIXO~ New ~ SOBDII~ Tampa ~ AR576O51~ 1b62df85-0~ Tampa Red      200. 
 9 TROZDLU~ What~ SOCQOH~ Ramble~ ARDNQ0R1~ dbfd61ef-f~ Lonnie Joh~    169. 
10 TRNNRUD~ Intro SOWIDV~ Dio's ~ AR65HBF1~ c55193fb-f~ Dio             97.0
# ... with 990 more rows, and 4 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>, time_since_first_release <int>
> 

> # Write SQL query
> query <- "SELECT * FROM track_metadata WHERE year < 1935 AND duration > 300"
> 
> # Run the query
> (results <- dbGetQuery(spark_conn, query))
            track_id              title            song_id              release
1 TRCYBTD12903CF37BD Devil Got My Woman SOFYCVA12A58A77D38 Vanguard Visionaries
           artist_id                          artist_mbid artist_name duration
1 ARL99WU1187B98FB1F f205743d-4441-471d-a3af-66f584738e29  Skip James 312.3979
  artist_familiarity artist_hotttnesss year
1          0.6236982         0.4217952 1931
> 
#
# Left join artist terms to track metadata by artist_id
> joined <- left_join(track_metadata_tbl, artist_terms_tbl, by = "artist_id")
> 
> # How many rows and columns are in the joined table?
> dim(joined)
[1] 33509    12

> # Anti join artist terms to track metadata by artist_id 
> joined <- anti_join(track_metadata_tbl, artist_terms_tbl, by = "artist_id")
> 
> # How many rows and columns are in the joined table?
> dim(joined)
[1]  2 11

# Semi join artist terms to track metadata by artist_id
> joined <- semi_join(track_metadata_tbl, artist_terms_tbl, by = "artist_id") 
> # How many rows and columns are in the joined table?
> dim(joined)
[1] 998  11

# Transforming continuous variables to logical----------------------------------------------
> hotttnesss <- track_metadata_tbl %>%
    # Select artist_hotttnesss
    select(artist_hotttnesss ) %>%
    # Binarize to is_hottt_or_nottt
    ft_binarizer("artist_hotttnesss","is_hottt_or_nottt", threshold = 0.5 ) %>%
    # Collect the result
    collect() %>%
    # Convert is_hottt_or_nottt to logical
    mutate(is_hottt_or_nottt = as.logical(is_hottt_or_nottt))
> 
> # Draw a barplot of is_hottt_or_nottt
> ggplot(hotttnesss, aes(is_hottt_or_nottt)) +
    geom_bar()
> 
> 
# Transforming continuous variables into categorical (1)--------------------------------------
> # ft_bucketizer() converts from continuous to categorical; now you'll see a common, special case of this.
> track_metadata_tbl
# Source:   table<track_metadata> [?? x 11]
# Database: spark_connection
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRSTWXA~ The ~ SOCQMX~ Espana  ARNNU4G1~ 5c176092-c~ 101 Strings     221.
 2 TRQNQZX~ Soul~ SOWULX~ Diary ~ ARJ9DSA1~ 4756395c-5~ John Mayal~     368.
 3 TRTPVEB~ The ~ SOHKYI~ The Bl~ ARQ8CJ61~ 15ab8bb8-7~ Illinois J~     329.
 4 TRZZNFB~ The ~ SOJVHK~ Give M~ ARFAKTH1~ 0174d942-3~ Chairmen O~     193.
 5 TRZAAWN~ Litt~ SORYVB~ Beauti~ ARNMWP51~ 4dca4bb2-2~ Curtis May~     321.
 6 TRRAOAD~ Will~ SODTBY~ Jammys~ ARMDWND1~ 8ee00333-e~ Black Uhuru     179.
 7 TRPGBAO~ Chil~ SOCTEW~ Pure A~ ARBSLZ11~ f940c4dd-f~ Alex de Gr~     162.
 8 TRQLTYD~ Ring~ SONNCT~ Eat To~ ARM7YQQ1~ 4d2956d1-a~ Blondie         210.
 9 TRJNORS~ Chat~ SOGQHH~ Sid Si~ ARBK4PS1~ 637504e3-b~ Sid Vicious     111.
10 TRLSQUC~ Migh~ SOTFGI~ Rockin~ ARRHNLN1~ d86c3c8b-8~ Jelly Roll~     242.
# ... with 990 more rows, and 3 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>
> decades
[1] 1930.01 1940.01 1950.01 1960.01 1970.01 1980.01 1990.01 2000.01 2010.01
> decade_labels
[1] "1930-1940" "1940-1950" "1950-1960" "1960-1970" "1970-1980" "1980-1990"
[7] "1990-2000" "2000-2010"
> 
> hotttnesss_over_time <- track_metadata_tbl %>%
    # Select artist_hotttnesss and year
    select(artist_hotttnesss, year ) %>%
    # Convert year to numeric
    mutate(year = as.numeric(year)) %>%
    # Bucketize year to decade using decades vector
    ft_bucketizer("year", "decade", splits = decades) %>%
    # Collect the result
    collect() %>%
    # Convert decade to factor using decade_labels
    mutate(decade = factor(decade, labels = decade_labels))
> 
> # Draw a boxplot of artist_hotttnesss by decade
> ggplot(hotttnesss_over_time, aes(decade, artist_hotttnesss)) +
    geom_boxplot()
    
Part2.    
    
> # Long songs are released by, on average, slightly more famous artists. 
#ft_binarizer(), ft_bucketizer(), and ft_quantile_discretizer() all transform continuous variables.
> track_metadata_tbl
# Source:   table<track_metadata> [?? x 11]
# Database: spark_connection
   track_id title song_id release artist_id artist_mbid artist_name duration
   <chr>    <chr> <chr>   <chr>   <chr>     <chr>       <chr>          <dbl>
 1 TRSTWXA~ The ~ SOCQMX~ Espana  ARNNU4G1~ 5c176092-c~ 101 Strings     221.
 2 TRQNQZX~ Soul~ SOWULX~ Diary ~ ARJ9DSA1~ 4756395c-5~ John Mayal~     368.
 3 TRTPVEB~ The ~ SOHKYI~ The Bl~ ARQ8CJ61~ 15ab8bb8-7~ Illinois J~     329.
 4 TRZZNFB~ The ~ SOJVHK~ Give M~ ARFAKTH1~ 0174d942-3~ Chairmen O~     193.
 5 TRZAAWN~ Litt~ SORYVB~ Beauti~ ARNMWP51~ 4dca4bb2-2~ Curtis May~     321.
 6 TRRAOAD~ Will~ SODTBY~ Jammys~ ARMDWND1~ 8ee00333-e~ Black Uhuru     179.
 7 TRPGBAO~ Chil~ SOCTEW~ Pure A~ ARBSLZ11~ f940c4dd-f~ Alex de Gr~     162.
 8 TRQLTYD~ Ring~ SONNCT~ Eat To~ ARM7YQQ1~ 4d2956d1-a~ Blondie         210.
 9 TRJNORS~ Chat~ SOGQHH~ Sid Si~ ARBK4PS1~ 637504e3-b~ Sid Vicious     111.
10 TRLSQUC~ Migh~ SOTFGI~ Rockin~ ARRHNLN1~ d86c3c8b-8~ Jelly Roll~     242.
# ... with 990 more rows, and 3 more variables: artist_familiarity <dbl>,
#   artist_hotttnesss <dbl>, year <int>
> duration_labels
[1] "very short" "short"      "medium"     "long"       "very long"
> 
> familiarity_by_duration <- track_metadata_tbl %>%
    # Select duration and artist_familiarity
    select(duration, artist_familiarity) %>%
    # Bucketize duration
    ft_quantile_discretizer("duration", "duration_bin",  n.buckets = 5) %>%
    # Collect the result
    collect() %>%
    # Convert duration bin to factor
    mutate(duration_bin = factor(duration_bin, labels = duration_labels))
> 
> # Draw a boxplot of artist_familiarity by duration_bin
> ggplot(familiarity_by_duration, aes(duration_bin, artist_familiarity )) +
    geom_boxplot()    

### -------------------------------More than words: tokenization (1)-----------------------------
# Transcendent tokenizing! Now for a quick diversion into sentiment analysis to analyze them!
title_text <- track_metadata_tbl %>%
  # Select artist_name, title
  select(artist_name, title) %>%
  # Tokenize title to words
  ft_tokenizer("title", "word") %>%
  # Collect the result
  collect() %>%
  # Flatten the word column 
  mutate(word = lapply(word, as.character)) %>% 
  # Unnest the list column
  unnest(word)
  
####   ------sprklyr and tidytext work well together for sentiment analysis. (1)  
  > title_text_tbl
# Source:   table<title_text> [?? x 3]
# Database: spark_connection
   artist_name             title                                   word    
   <chr>                   <chr>                                   <chr>   
 1 Charles Mingus          Meditation (For A Pair Of Wire Cutters) of      
 2 Charles Mingus          Meditation (For A Pair Of Wire Cutters) wire    
 3 Charles Mingus          Meditation (For A Pair Of Wire Cutters) cutters)
 4 Barry McGuire           You Were On My Mind                     you     
 5 Barry McGuire           You Were On My Mind                     were    
 6 Barry McGuire           You Were On My Mind                     on      
 7 Barry McGuire           You Were On My Mind                     my      
 8 Barry McGuire           You Were On My Mind                     mind    
 9 The Spencer Davis Group When a Man Loves a Woman                when    
10 The Spencer Davis Group When a Man Loves a Woman                a       
# ... with 3,238 more rows
> afinn_sentiments_tbl
# Source:   table<afinn_sentiments> [?? x 2]
# Database: spark_connection
   word        score
   <chr>       <int>
 1 illiteracy     -2
 2 illness        -2
 3 illnesses      -2
 4 imbecile       -3
 5 immobilized    -1
 6 immortal        2
 7 immune          1
 8 impatient      -2
 9 imperfect      -2
10 importance      2
# ... with 2,466 more rows
> 
> sentimental_artists <- title_text_tbl %>%
    # Inner join with sentiments on word field
    inner_join(afinn_sentiments_tbl, by = "word") %>%
    # Group by artist
    group_by(artist_name) %>%
    # Summarize to get positivity
    summarize(positivity = sum(score))
> 
> 
> sentimental_artists %>%
    # Arrange by ascending positivity
    arrange(positivity) %>%
    # Get top 5
    top_n(5)
Selecting by  positivity
# Source:     lazy query [?? x 2]
# Database:   spark_connection
# Ordered by: positivity
  artist_name       positivity
  <chr>                  <dbl>
1 Percy Mayfield            16
2 Billie Holiday             7
3 Sam Cooke                  7
4 Jimmie Davis               6
5 Skip James                 6
6 The Drifters               6
7 Jimmy Witherspoon          6
8 Nazz                       6
> 
> sentimental_artists %>%
    # Arrange by descending positivity
    arrange(desc(positivity)) %>%
    # Get top 5
    top_n(5)
Selecting by  positivity
# Source:     lazy query [?? x 2]
# Database:   spark_connection
# Ordered by: desc(positivity)
  artist_name       positivity
  <chr>                  <dbl>
1 Percy Mayfield            16
2 Billie Holiday             7
3 Sam Cooke                  7
4 Jimmie Davis               6
5 Skip James                 6
6 The Drifters               6
7 Jimmy Witherspoon          6
8 Nazz                       6
